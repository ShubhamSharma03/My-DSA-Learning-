I have done this question using two approaches.

1. Navie Approach
TC: O(N^2)  SC:O(1)

 vector<int> sortedSquares(vector<int>& nums) {
        int n=nums.size();
        vector<int> ans;
        
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(abs(nums[i])>abs(nums[j]))
                {
                    swap(nums[i],nums[j]);
                }  
                 
            }
            ans.push_back(nums[i]*nums[i]);
       
        }    
        
        return ans;
    }
};


2. Optimal Approach
TC: O(N) SC: O(N)

vector<int> sortedSquares(vector<int>& nums) {
        int n=nums.size();
        
        int neg_index=0;
        int pos_index=n-1;
        
        vector<int> sorted(n);
        
        for(int i=sorted.size()-1;i>=0;i--)
        {
            int num1 = nums[neg_index] * nums[neg_index];
            int num2 = nums[pos_index] * nums[pos_index];
            
            sorted[i] = num1>num2 ? num1 : num2;
            
            if(num1>num2) neg_index++;
            else pos_index--;
            
        }
        return sorted;
        
   
    }
};
