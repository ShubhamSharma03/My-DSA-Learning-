This problem is just advance version of 2 Sum and 3 Sum Problem.


Optimised Approach: TC-O(N^2) SC:O(1)

    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        
        vector<vector<int>> ans;
        
        sort(nums.begin(),nums.end());
        
        for(int i=0;i<n;i++)
        {
            int target_3=target-nums[i];
            
            for(int j=i+1;j<n;j++)
            {
                int target_2=target_3-nums[j];
                
                int front=j+1;
                int back=n-1;
                while(front<back)
                {
                    int sum=nums[front]+nums[back];
                    if(sum<target_2) front++;
                    else if(sum>target_2) back--;
                    else
                    {
                        vector<int> temp(4,0);
                        temp[0]=nums[i];
                        temp[1]=nums[j];
                        temp[2]=nums[front];
                        temp[3]=nums[back];
                        ans.push_back(temp);
                        
                    while(front<back && nums[front]==temp[2]) front++;
                    while(front<back && nums[back]==temp[3])  back--;
                    }
                                     
                }
                while(j<n-1 && nums[j+1]==nums[j]) j++;
            }
            while(i<n-1 && nums[i+1]==nums[i]) i++;
        }
        return ans;
    }
};
