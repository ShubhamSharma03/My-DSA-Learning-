I tried this ques using 3 Approaches.

1. Approach
TC: O(N) SC:O(1)

 int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int ans=nums[0];
        if(n==1) return ans;
        
        int count=1;
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]==ans)
            {
                count++;
            }
            else
            {
                count--;
            }
            
            if(count==0)
            {
                ans=nums[i];
                count=1;
            }
        }
        return ans;
        }
    };
    
2nd Method
    TC: O(N) SC:O(1)
    
 int majorityElement(vector<int>& nums) {
     sort(nums.begin(),nums.end());
     return nums[nums.size()/2];
    }
};

3rd Method Moore's Voting Algorithm 
TC: O(N) SC:O(1)

 int majorityElement(vector<int>& nums) {
        int n=nums.size();
        
        int majorityIndex=0;
        
        int count=1;
        for(int i=1;i<n;i++){
            if(nums[majorityIndex]==nums[i]) count++;
            else count--;
            
            if(count==0)
            {
                count=1;
                majorityIndex=i;
                
            }
        }
        return nums[majorityIndex];
    }
};
